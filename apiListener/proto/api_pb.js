/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apiproto.AreaInfo', null, global);
goog.exportSymbol('proto.apiproto.AreaInfo.LocationType', null, global);
goog.exportSymbol('proto.apiproto.HistoricalInfo', null, global);
goog.exportSymbol('proto.apiproto.ListOfCounties', null, global);
goog.exportSymbol('proto.apiproto.ListOfCountries', null, global);
goog.exportSymbol('proto.apiproto.ListOfStates', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apiproto.ListOfStates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apiproto.ListOfStates.repeatedFields_, null);
};
goog.inherits(proto.apiproto.ListOfStates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apiproto.ListOfStates.displayName = 'proto.apiproto.ListOfStates';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apiproto.ListOfStates.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apiproto.ListOfStates.prototype.toObject = function(opt_includeInstance) {
  return proto.apiproto.ListOfStates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apiproto.ListOfStates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apiproto.ListOfStates.toObject = function(includeInstance, msg) {
  var f, obj = {
    country: jspb.Message.getFieldWithDefault(msg, 1, ""),
    statesList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apiproto.ListOfStates}
 */
proto.apiproto.ListOfStates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apiproto.ListOfStates;
  return proto.apiproto.ListOfStates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apiproto.ListOfStates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apiproto.ListOfStates}
 */
proto.apiproto.ListOfStates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addStates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apiproto.ListOfStates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apiproto.ListOfStates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apiproto.ListOfStates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apiproto.ListOfStates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string Country = 1;
 * @return {string}
 */
proto.apiproto.ListOfStates.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.apiproto.ListOfStates.prototype.setCountry = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string States = 2;
 * @return {!Array<string>}
 */
proto.apiproto.ListOfStates.prototype.getStatesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.apiproto.ListOfStates.prototype.setStatesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.apiproto.ListOfStates.prototype.addStates = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.apiproto.ListOfStates.prototype.clearStatesList = function() {
  this.setStatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apiproto.ListOfCountries = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apiproto.ListOfCountries.repeatedFields_, null);
};
goog.inherits(proto.apiproto.ListOfCountries, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apiproto.ListOfCountries.displayName = 'proto.apiproto.ListOfCountries';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apiproto.ListOfCountries.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apiproto.ListOfCountries.prototype.toObject = function(opt_includeInstance) {
  return proto.apiproto.ListOfCountries.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apiproto.ListOfCountries} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apiproto.ListOfCountries.toObject = function(includeInstance, msg) {
  var f, obj = {
    countriesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apiproto.ListOfCountries}
 */
proto.apiproto.ListOfCountries.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apiproto.ListOfCountries;
  return proto.apiproto.ListOfCountries.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apiproto.ListOfCountries} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apiproto.ListOfCountries}
 */
proto.apiproto.ListOfCountries.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addCountries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apiproto.ListOfCountries.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apiproto.ListOfCountries.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apiproto.ListOfCountries} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apiproto.ListOfCountries.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountriesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string Countries = 1;
 * @return {!Array<string>}
 */
proto.apiproto.ListOfCountries.prototype.getCountriesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.apiproto.ListOfCountries.prototype.setCountriesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.apiproto.ListOfCountries.prototype.addCountries = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.apiproto.ListOfCountries.prototype.clearCountriesList = function() {
  this.setCountriesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apiproto.ListOfCounties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apiproto.ListOfCounties.repeatedFields_, null);
};
goog.inherits(proto.apiproto.ListOfCounties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apiproto.ListOfCounties.displayName = 'proto.apiproto.ListOfCounties';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apiproto.ListOfCounties.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apiproto.ListOfCounties.prototype.toObject = function(opt_includeInstance) {
  return proto.apiproto.ListOfCounties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apiproto.ListOfCounties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apiproto.ListOfCounties.toObject = function(includeInstance, msg) {
  var f, obj = {
    country: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: jspb.Message.getFieldWithDefault(msg, 2, ""),
    countiesList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apiproto.ListOfCounties}
 */
proto.apiproto.ListOfCounties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apiproto.ListOfCounties;
  return proto.apiproto.ListOfCounties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apiproto.ListOfCounties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apiproto.ListOfCounties}
 */
proto.apiproto.ListOfCounties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addCounties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apiproto.ListOfCounties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apiproto.ListOfCounties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apiproto.ListOfCounties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apiproto.ListOfCounties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCountiesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string Country = 1;
 * @return {string}
 */
proto.apiproto.ListOfCounties.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.apiproto.ListOfCounties.prototype.setCountry = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string State = 2;
 * @return {string}
 */
proto.apiproto.ListOfCounties.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.apiproto.ListOfCounties.prototype.setState = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string Counties = 3;
 * @return {!Array<string>}
 */
proto.apiproto.ListOfCounties.prototype.getCountiesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.apiproto.ListOfCounties.prototype.setCountiesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.apiproto.ListOfCounties.prototype.addCounties = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.apiproto.ListOfCounties.prototype.clearCountiesList = function() {
  this.setCountiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apiproto.HistoricalInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apiproto.HistoricalInfo.repeatedFields_, null);
};
goog.inherits(proto.apiproto.HistoricalInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apiproto.HistoricalInfo.displayName = 'proto.apiproto.HistoricalInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apiproto.HistoricalInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apiproto.HistoricalInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apiproto.HistoricalInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apiproto.HistoricalInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apiproto.HistoricalInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.apiproto.AreaInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apiproto.HistoricalInfo}
 */
proto.apiproto.HistoricalInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apiproto.HistoricalInfo;
  return proto.apiproto.HistoricalInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apiproto.HistoricalInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apiproto.HistoricalInfo}
 */
proto.apiproto.HistoricalInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apiproto.AreaInfo;
      reader.readMessage(value,proto.apiproto.AreaInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apiproto.HistoricalInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apiproto.HistoricalInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apiproto.HistoricalInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apiproto.HistoricalInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apiproto.AreaInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AreaInfo Info = 1;
 * @return {!Array<!proto.apiproto.AreaInfo>}
 */
proto.apiproto.HistoricalInfo.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.apiproto.AreaInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apiproto.AreaInfo, 1));
};


/** @param {!Array<!proto.apiproto.AreaInfo>} value */
proto.apiproto.HistoricalInfo.prototype.setInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apiproto.AreaInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apiproto.AreaInfo}
 */
proto.apiproto.HistoricalInfo.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apiproto.AreaInfo, opt_index);
};


proto.apiproto.HistoricalInfo.prototype.clearInfoList = function() {
  this.setInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apiproto.AreaInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apiproto.AreaInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apiproto.AreaInfo.displayName = 'proto.apiproto.AreaInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apiproto.AreaInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apiproto.AreaInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apiproto.AreaInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apiproto.AreaInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    unixtimeofrequest: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lat: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    pb_long: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    deaths: jspb.Message.getFieldWithDefault(msg, 4, 0),
    confirmedcases: jspb.Message.getFieldWithDefault(msg, 5, 0),
    testsgiven: jspb.Message.getFieldWithDefault(msg, 6, 0),
    recoveries: jspb.Message.getFieldWithDefault(msg, 7, 0),
    incidentrate: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    type: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apiproto.AreaInfo}
 */
proto.apiproto.AreaInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apiproto.AreaInfo;
  return proto.apiproto.AreaInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apiproto.AreaInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apiproto.AreaInfo}
 */
proto.apiproto.AreaInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnixtimeofrequest(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLong(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeaths(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConfirmedcases(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTestsgiven(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRecoveries(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setIncidentrate(value);
      break;
    case 9:
      var value = /** @type {!proto.apiproto.AreaInfo.LocationType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apiproto.AreaInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apiproto.AreaInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apiproto.AreaInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apiproto.AreaInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnixtimeofrequest();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getLong();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getDeaths();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getConfirmedcases();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getTestsgiven();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getRecoveries();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getIncidentrate();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apiproto.AreaInfo.LocationType = {
  COUNTY: 0,
  STATE: 1,
  COUNTRY: 2
};

/**
 * optional int64 UnixTimeOfRequest = 1;
 * @return {number}
 */
proto.apiproto.AreaInfo.prototype.getUnixtimeofrequest = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.apiproto.AreaInfo.prototype.setUnixtimeofrequest = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float Lat = 2;
 * @return {number}
 */
proto.apiproto.AreaInfo.prototype.getLat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.apiproto.AreaInfo.prototype.setLat = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float Long = 3;
 * @return {number}
 */
proto.apiproto.AreaInfo.prototype.getLong = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.apiproto.AreaInfo.prototype.setLong = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional uint32 Deaths = 4;
 * @return {number}
 */
proto.apiproto.AreaInfo.prototype.getDeaths = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apiproto.AreaInfo.prototype.setDeaths = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 ConfirmedCases = 5;
 * @return {number}
 */
proto.apiproto.AreaInfo.prototype.getConfirmedcases = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.apiproto.AreaInfo.prototype.setConfirmedcases = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 TestsGiven = 6;
 * @return {number}
 */
proto.apiproto.AreaInfo.prototype.getTestsgiven = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.apiproto.AreaInfo.prototype.setTestsgiven = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 Recoveries = 7;
 * @return {number}
 */
proto.apiproto.AreaInfo.prototype.getRecoveries = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.apiproto.AreaInfo.prototype.setRecoveries = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional float Incidentrate = 8;
 * @return {number}
 */
proto.apiproto.AreaInfo.prototype.getIncidentrate = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.apiproto.AreaInfo.prototype.setIncidentrate = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional LocationType Type = 9;
 * @return {!proto.apiproto.AreaInfo.LocationType}
 */
proto.apiproto.AreaInfo.prototype.getType = function() {
  return /** @type {!proto.apiproto.AreaInfo.LocationType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.apiproto.AreaInfo.LocationType} value */
proto.apiproto.AreaInfo.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


goog.object.extend(exports, proto.apiproto);
